name: Deploy and Manage Infrastructure

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'app/**'
      - 'docs/**'
      - 'readme.md'
      - '.github/workflows/app-deploy.yml'
      - 'backend_s3_create/**'
      - 'oidc/**'
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform Action (apply or destroy)'
        required: true
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write   # Required for OIDC
  contents: read # This is required for actions/checkout

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy_infra:
    name: Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout Code/repository
        uses: actions/checkout@v4

      # OIDC-based AWS authentication (no static AWS keys in needed in secrets)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
<<<<<<< HEAD
=======

      - name: Terraform Init (with environment variables)
        run: |
          terraform init -migrate-state \
            -backend-config="bucket=${{ secrets.S3_BUCKET_NAME }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.S3_BUCKET_REGION }}"

      - name: Cache Terraform Modules & Providers
        uses: actions/cache@v4
>>>>>>> 967d16d6b18379fdae393e21505bbc79e4354136
        with:
          terraform_version: "1.6.6"

<<<<<<< HEAD
      - name: Terraform Init 
        id: init
        run: terraform init
        continue-on-error: false
=======
      - name: Restore Terraform State
        uses: actions/cache@v4
        with:
          path: ./infra/terraform.tfstate
          key: terraform-state-${{ github.run_id }}
          restore-keys: terraform-state-

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Refresh (before Apply or Destroy)
        run: |
          terraform init -migrate-state \
            -backend-config="bucket=${{ secrets.S3_BUCKET_NAME }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.S3_BUCKET_REGION }}"
          terraform refresh
>>>>>>> 967d16d6b18379fdae393e21505bbc79e4354136

      - name: Terraform Plan
        id: plan 
        run: terraform plan -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: infra/tfplan

      - name: Terraform Apply
<<<<<<< HEAD
        id: apply
        if: ${{ github.event.inputs.terraform_action == 'apply' }}
        run: terraform apply -auto-approve tfplan
=======
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve

      - name: Save Terraform State
        uses: actions/cache@v4
        with:
          path: ./infra/terraform.tfstate
          key: terraform-state-${{ github.run_id }}

      - name: Debug Terraform State (on Destroy)
        if: github.event.inputs.action == 'destroy'
        run: terraform state list
>>>>>>> 967d16d6b18379fdae393e21505bbc79e4354136

      - name: Terraform Destroy
        id: destroy
        if: ${{ github.event.inputs.terraform_action == 'destroy' }}
        run: terraform destroy -auto-approve

         
      - name: Terraform Output
        id: output  
        run: terraform output -json > output.json

      - name: Upload Terraform Output
        uses: actions/upload-artifact@v3
        with:
          name: terraform-output
          path: output.json
          if-no-files-found: error
